{
  "name": "console-stamp",
  "main": "main",
  "version": "0.2.4",
  "author": {
    "name": "Ståle Raknes",
    "email": "stale@raknes.net",
    "url": "http://github.com/starak"
  },
  "contributors": [
    {
      "name": "Ståle Raknes",
      "url": "http://github.com/starak"
    },
    {
      "name": "Jotham Read",
      "url": "https://github.com/jotham"
    },
    {
      "name": "Christiaan Westerbeek",
      "url": "https://github.com/devotis"
    },
    {
      "name": "Leon Lucardie",
      "url": "https://github.com/Gameleon12"
    },
    {
      "name": "Steffan Donal",
      "url": "https://github.com/SteffanDonal"
    }
  ],
  "description": "Patch NodeJS console methods in order to add timestamp information by pattern",
  "keywords": [
    "console",
    "timestamp",
    "log",
    "jslog",
    "debug"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/starak/node-console-stamp.git"
  },
  "license": "MIT",
  "dependencies": {
    "dateformat": "^1.0.11",
    "merge": "^1.2.0",
    "chalk": "^1.1.1"
  },
  "devDependencies": {
    "filesize": "^3.1.2",
    "moment": "^2.13.0"
  },
  "readme": "# console-stamp\n\n[![npm][npm-image]][npm-url]\n[![downloads][downloads-image]][downloads-url]\n\n[npm-image]: https://img.shields.io/npm/v/console-stamp.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/console-stamp\n[downloads-image]: https://img.shields.io/npm/dm/console-stamp.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/console-stamp\n\nThis module enables you to patch the console's methods in Node.js, to add timestamp prefix based on a given string pattern, and more...\n\n## Usage ##\n\n### Install\n\n    npm install console-stamp\n\n### Patching the console\n\n    require(\"console-stamp\")(console, [options]);\n\n#### console\nThe global console or [custom console](#customconsole).\n\n#### options {Object|String}\n\nFrom version 2.0 the second parameter is an object with several options. As a backward compatibillity feature this parameter can be a string containing the pattern.\n\n* **options.pattern** {String}<br>A string with date format based on [Javascript Date Format](http://blog.stevenlevithan.com/archives/date-time-format)<br>**Default**: \"ddd mmm dd yyyy HH:MM:ss\"\n\n* **options.formatter** {Function}<br>A custom date formatter that should return a formmatted date string.\n\n* **options.label** {Boolean}<br>If true it will show the label (LOG | INFO | WARN | ERROR)<br>**Default**: true\n\n* **options.include** {Array}<br>An array containing the methods to include in the patch<br>**Default**: [\"log\", \"info\", \"warn\", \"error\", \"dir\", \"assert\"]\n\n* **options.exclude** {Array}<br>An array containing the methods to exclude in the patch<br>**Default**: [] \\(none)\n\n* **options.disable** {Array}<br>An array containing the methods to disable in the patch<br>**Default**: [] \\(none)\n\n* **options.level** {String}<br>A string choosing the most verbose logging function to allow. Ordered/grouped as such: \"log dir\", \"info\", \"warn assert\", \"error\"<br>**Default**: log\n\n* **options.metadata** {String/Object/Function}<br>Types can be String, Object (interpreted with util.inspect), or Function. See the test-metadata.js for examples.<br>**Note** that metadata can still be sent as the third parameter (as in vesion 1.6) as a backward compatibillity feature, but this is deprecated. <br>**Default**: undefined\n\n* **options.stdout** {WritableStream}<br>A custom `stdout` to use with [custom console](#customconsole).<br>**Default:** `process.stdout`\n\n* **options.stderr** {WritableStream}<br>A custom `stderr` to use with [custom console](#customconsole).<br>**Default:** `options.stdout` or `process.stdout`\n\n* **options.colors** {Object}<br>An object representing a color theme. More info [here](https://www.npmjs.com/package/chalk).\n\n    * **options.colors.stamp** {String/Array<String>/Function} <br>**Default:** []\n\n    * **options.colors.label** {String/Array<String>/Function} <br>**Default:** []\n\n    * **options.colors.metadata** {String/Array<String>/Function} <br>**Default:** []\n\nNote: To combine colors, bgColors and style, set them as an array like this:\n\n    ...\n        stamp: [\"black\", \"bgYellow\", \"underline\"]\n    ...\n\n\nOr chain Chalk functions like this:\n\n    ...\n        stamp: require(\"chalk\").red.bgYellow.underline;\n    ...\n\n\nNote also that by sending the parameter `--no-color` when you start your node app, will prevent any colors from console.\n\n    $ node my-app.js --no-color\n\n### Example\n\n    // Patch console.x methods in order to add timestamp information\n    require( \"console-stamp\" )( console, { pattern : \"dd/mm/yyyy HH:MM:ss.l\" } );\n\n    console.log(\"Hello World!\");\n    // -> [26/06/2015 14:02:48.062] [LOG] Hello World!\n\n    var port = 8080;\n    console.log(\"Server running at port %d\", port);\n    // -> [26/06/2015 16:02:35.325] [LOG] Server running at port 8080\n\n&nbsp;\n\n    console.log( \"This is a console.log message\" );\n    console.info( \"This is a console.info message\" );\n    console.warn( \"This is a console.warn message\" );\n    console.error( \"This is a console.error message\" );\n    console.dir( {bar: \"This is a console.dir message\"} );\n\nResult:\n\n    [26/06/2015 12:44:31.777] [LOG]   This is a console.log message\n    [26/06/2015 12:44:31.777] [INFO]  This is a console.info message\n    [26/06/2015 12:44:31.779] [WARN]  This is a console.warn message\n    [26/06/2015 12:44:31.779] [ERROR] This is a console.error message\n    [26/06/2015 12:44:31.779] [DIR]   { bar: 'This is a console.dir message' }\n\nand\n\n    require( \"console-stamp\" )( console, {\n        metadata: function () {\n            return (\"[\" + process.memoryUsage().rss + \"]\");\n        },\n        colors: {\n            stamp: \"yellow\",\n            label: \"white\",\n            metadata: \"green\"\n        }\n    } );\n\n    console.log( \"This is a console.log message\" );\n    console.info( \"This is a console.info message\" );\n    console.warn( \"This is a console.warn message\" );\n    console.error( \"This is a console.error message\" );\n    console.dir( {bar: \"This is a console.dir message\"} );\n\nResult:\n\n![Console](gfx/console.png)\n\n<a name=\"customconsole\"></a>\n### Custom Console [v0.2.4+]\n\nAs of version 0.2.4 you can also create a custom console with its own `stdout` and `stderr` like this:\n\n\n```\n\tvar fs = require( 'fs' );\n\tvar output = fs.createWriteStream( './stdout.log' );\n\tvar errorOutput = fs.createWriteStream( './stderr.log' );\n\tvar logger = new console.Console( output, errorOutput );\n\t\n\tconsole_stamp( logger, {\n\t    stdout: output,\n\t    stderr: errorOutput\n\t} );\n```\n\nEverything is then written to the files.\n\n**NOTE:** If `stderr` isn't passed, warning and error output will be sent to the given `stdout`.\n\n\n### Custom Formatter Example\n\nCustom forrmatter using moment.js\n\n    var moment = require('moment');\n    moment.locale('ja');\n\n    require( \"console-stamp\" )( console, {\n        formatter:function(){\n            return moment().format(\"LLLL\");\n        }\n    } );\n\n    console.log( \"This is a console.log message\" );\n    console.info( \"This is a console.info message\" );\n    console.warn( \"This is a console.warn message\" );\n    console.error( \"This is a console.error message\" );\n    console.dir( {bar: \"This is a console.dir message\"} );\n\nResult:\n\n    [2016年5月12日午前11時10分 木曜日] [LOG]   This is a console.log message\n    [2016年5月12日午前11時10分 木曜日] [INFO]  This is a console.info message\n    [2016年5月12日午前11時10分 木曜日] [WARN]  This is a console.warn message\n    [2016年5月12日午前11時10分 木曜日] [ERROR] This is a console.error message\n    [2016年5月12日午前11時10分 木曜日] [DIR]   { bar: 'This is a console.dir message' }\n\n### Adding Metadata ###\n\nTypes can be string, object (interpreted with util.inspect), or function.\nSee the [test-metadata.js](https://github.com/starak/node-console-stamp/blob/master/test-metadata.js) for examples.\n\n#### String example\n\n    require(\"console-stamp\")(console, {\n        pattern:\"HH:MM:ss.l\",\n        metadata:'[' + process.pid + ']'\n    });\n\n    console.log('Metadata applied.');\n\nResult:\n\n    [26/06/2015 12:44:31.779] [LOG] [7785] Metadata applied.\n\n#### Function example\n\n    var util = require(\"util\");\n\n    require(\"console-stamp\")(console, {\n        pattern:\"HH:MM:ss.l\",\n        metadata: function(){ return '[' + (process.memoryUsage().rss) + ']'; });\n\n    console.log('Metadata applied.');\n\nResult:\n\n    [18:10:30.875] [LOG] [14503936] Metadata applied.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/starak/node-console-stamp/issues"
  },
  "_id": "console-stamp@0.2.4",
  "dist": {
    "shasum": "db549768036ca55709b6b55d7eda4f5f3467ec50"
  },
  "_from": "console-stamp@",
  "_resolved": "https://registry.npmjs.org/console-stamp/-/console-stamp-0.2.4.tgz"
}
