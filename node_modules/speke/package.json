{
  "name": "speke",
  "version": "0.0.3",
  "description": "Simple Password Exponential Key Exchange for Node.js. Resistant to MITM, unlike vanilla Diffie-Hellman",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/shovon/node-speke.git"
  },
  "keywords": [
    "speke",
    "diffiehellman",
    "mitrmaresistant",
    "keyexchange",
    "publickeycryptography",
    "pake",
    "cryptography"
  ],
  "author": {
    "name": "Salehen Shovon Rahman",
    "email": "sal@linux.com",
    "url": "http://shovon.github.io"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test.js"
  },
  "dependencies": {
    "bignum": "^0.9.2"
  },
  "devDependencies": {
    "mocha": "~1.18.2"
  },
  "readme": "# speke\n\nAn incredibly simple balanced password-authenticated key exchange (PAKE) for Node.js.\n\n[![Build Status](https://travis-ci.org/shovon/node-speke.svg)](https://travis-ci.org/shovon/node-speke)\n\nThis library is an implementation of [SPEKE](http://en.wikipedia.org/wiki/SPEKE_(cryptography)). Meant to reflect Node.js crypto's Diffie-Hellman API.\n\n## Example\n\n```javascript\n// Our password.\nvar password = 'keyboardcat';\n\n// Prepares an object for both Alice and Bob, with a prime value set.\nvar alice = SPEKE.getSPEKE('modp5');\nvar bob = SPEKE.getSPEKE('modp5');\n\n// Initialize the generator, based on the password, as well as create the\n// public and private keys.\nalice.generateKeys(password);\nbob.generateKeys(password);\n\n// Compute the shared secret, with Alice using Bob's public key, and Bob using\n// Alice's public key.\nvar alice_secret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\nvar bob_secret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\n\n// We should now have the same shared secret.\nassert(alice_secret.length > 1);\nassert(alice_secret === bob_secret);\n```\n\n## API\n\nThe API is 100% compatible with [Node.js Crypto's Diffie-Hellman API](http://nodejs.org/api/crypto.html#crypto_class_diffiehellman), except that the `generateKeys` method **absolutely** requires a password as the first parameter, and the second parameter is an optional encoding type, which can either be set to `'binary'`, `'hex'`, or `'base64'`. At the absence of the latter parameter, a buffer is returned for the public key.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/shovon/node-speke/issues"
  },
  "_id": "speke@0.0.3",
  "_from": "speke@"
}
